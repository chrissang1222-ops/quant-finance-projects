import numpy as np
import matplotlib.pyplot as plt
# Initial parameters
S0 = 150        # starting stock price ($150)
mu = 0.05       # expected return (5%)
sigma = 0.2     # volatility (20%)
T = 1           # time horizon (1 year)
steps = 252     # trading days in a year
N = 1000        # number of simulations
dt = T / steps
price_paths = np.zeros((steps+1, N))
price_paths[0] = S0

for t in range(1, steps+1):
    Z = np.random.standard_normal(N)  # random shocks
    price_paths[t] = price_paths[t-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)
    plt.figure(figsize=(10,6))
plt.plot(price_paths[:, :10])  # plot only 10 paths to keep it readable
plt.title("Monte Carlo Simulation of Stock Prices")
plt.xlabel("Time (days)")
plt.ylabel("Stock Price ($)")
plt.show()
expected_price = np.mean(price_paths[-1])
print("Expected price after 1 year:", expected_price)
final_prices = price_paths[-1]
prob_above_160 = np.mean(final_prices > 160)
print("Probability final price > $160:", prob_above_160)
K = 160
r = 0.03  # risk-free rate
payoffs = np.maximum(final_prices - K, 0)
call_price = np.exp(-r*T) * np.mean(payoffs)
print("Monte Carlo Call Option Price:", call_price)
